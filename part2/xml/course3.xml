<?xml version="1.0" encoding="UTF-8" ?>
<course_type	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns="http://34.213.198.190/COMP466TMA2/part2/xml"
				xsi:schemaLocation="http://34.213.198.190/COMP466TMA2/part2/xml 
									course_type.xsd">
	<name>XML</name>
	<code>STU300</code>
	<instructors>
		<instructor>
			<instructor_id>3</instructor_id>
			<firstname>Brad</firstname>
			<lastname>Edwards</lastname>
		</instructor>
	</instructors>
	<summary>
		<paragraph>
			<text>This course covers the basics of XML.</text>
		</paragraph>
	</summary>
	<objectives>
		<objective>Understand the uses of XML.</objective>
		<objective>Understand the basics of XML syntax.</objective>
	</objectives>
	<introduction>
		<paragraph>
			<text>XML is a language for annotating, or marking up, documents in a human-readable, machine-parsable way.</text>
		</paragraph>
	</introduction>
	<sections>
		<section>
			<order>1</order>
			<title>Introduction</title>
			<content>
				<paragraph>
					<text>XML documents consist of text surrounded in tags, which will be very familiar to those used to HTML and usually have a .xml extension. XML parsers turn XML documents into trees that can be traversed and manipulated. If an XML parser can parse an XML document successfully, the document is considered well-formed. Developers are free to use whatever tags they like, nested to arbitrary depths. To constrain this freedom and ensure documents conform to a specification developers can create Document Type Definition (DTD) or XML schema documents. These documents specify how a given XML document should be formatted. If an XML document meets the requirements of a DTD or schema, the document is considered valid. Of note, XML is case sensitive so developers need to pay attention to being consistent.</text>
				</paragraph>
				<paragraph>
					<text indent="1">&#8249;?xml version = \1.0\?&#8250;</text><break />
					<text indent="1">&#8249;!-- a comment! --&#8250;</text><break /><break />
					<text indent="1">&#8249;cow&#8250;</text><break />
					<text indent="2">&#8249;colour&#8250;Brown&#8249;/colour&#8250;</text><break />
					<text indent="2">&#8249;hasSpots&#8250;Yes&#8249;/hasSpots&#8250;</text><break />
					<text indent="1">&#8249;/cow&#8250;</text>
				</paragraph>
				<paragraph>
					<text>The above is an example of a very simple XML document. The first tag identifies the document as an XML document. This is a standardized element to assist parsers. The second line is an XML comment that developers can use as code documentation. Comments will not be parsed by the XML parser. The rest of the document is arbitrary in the same sense that an object-oriented class is arbitrary. Any elements with any values can be included.</text>
				</paragraph>
			</content>
		</section>
		<section>
			<order>2</order>
			<title>Namespaces</title>
			<content>
				<paragraph>
					<text>Since XML documents can be defined by any developer, there is the possibility of naming collisions when XML documents are shared. To manage this, XML allows for declaring namespaces. Namespaces consist of an arbitrary prefix, which must not include 'xml', and a URI to uniquely identify the namespace. For instance, the following is a namespace declaration:</text><break />
					<text indent="1">&#8249;farm:table xmlns:farm='http://www.farmerjoe.com'&#8250;</text>
				</paragraph>
			</content>
		</section>
		<section>
			<order>3</order>
			<title>DTD's and Schema</title>
			<content>
				<paragraph>
					<text>DTDs are declared in .dtd files and use Extended Backus-Naur Form (EBNF) grammar. Schemas are declared using XML syntax. Schema elements are declared within &#8249;schema&#8250; tags. Elements are either simple or complex types, with complex types allowed to contain other elements. XML includes string, boolean, decimal, float, double, long, int, short, date and time as built-in elements that can be used as simple types. In addition, there are publically available XML vocabularies that can be by developers. Examples include MathML, Scalable Vector Graphics and Wireless Markup Language.</text>
				</paragraph>
			</content>
		</section>
		<section>
			<order>4</order>
			<title>XML DOM</title>
			<content>
				<paragraph>
					<text>Some XML parsers will load XML documents into a DOM, much as HTML parsers do. The DOM can then be traversed in JavaScript code. The JavaScript XMLHttpRequest object can be used to fetch, open and parse XML documents. A new xmlHttpRequest object is created, followed by a call to the object's open method to get the XML document.</text><break />
					<text indent="1">var request = new XMLHttpRequest();</text><break />
					<text indent="1">request.open('get', urlToXmlDoc, false);</text>
				</paragraph>
				<paragraph>
					<text>XML parsers may have idiosyncracies that result in different behaviours or requirements for XML documents. Developers will need to research the peculiarities of target parsers.</text>
				</paragraph>
			</content>
		</section>
		<section>
			<order>5</order>
			<title>XSLT</title>
			<content>
				<paragraph>
					<text>Extensible Stylesheet Language Transformations (XSLT) is a style sheet language used to control the process of changing XML documents into HTML. XSLT includes the XPath syntax for navigating XML DOM, and XPath can be used in most major web languages.</text>
				</paragraph>
			</content>
		</section>
		<section>
			<order>6</order>
			<title>AJAX</title>
			<content>
				<paragraph>
					<text>Asynchronous JavaScript and XML is a programming methodology that uses JavaScript, XML, HTML, CSS, JSON, the DOM, XSLT and the XMLHttpRequest to allow small updates to a user interface without reloading an entire page. JSON is often used rather XML, however the goal is the same; create dynamic web pages and applications. Developers do need to be aware that if a browser does not support or allow XMLHttpRequest, the user is using a screen reader or two-way communications with a server are needed, the AJAX approach may be not the most appropriate. The dynamic nature of AJAX pages or applications can also prevent bookmarks or the back function of browsers work as normally expected.</text>
				</paragraph>
			</content>
		</section>
	</sections>
	<assignments>
	</assignments>
	<quizzes>
		<quiz>
			<order>1</order>
			<title>XML Quiz</title>
			<weight>100</weight>
			<questions>
				<question>
					<order>1</order>
					<text>XML stands for:</text>
					<options>
						<option>
							<order>1</order>
							<text>Extendable Markup Language</text>
						</option>
						<option>
							<order>2</order>
							<text>Extensible Manipulation Language</text>
						</option>
						<option>
							<order>3</order>
							<text>Extensible Markup Language</text>
						</option>
						<option>
							<order>4</order>
							<text>Extensible Markup Labels</text>
						</option>
					</options>
					<answer>3</answer>
				</question>
				<question>
					<order>2</order>
					<text>Schema are used to:</text>
					<options>
						<option>
							<order>1</order>
							<text>Summary XML documents</text>
						</option>
						<option>
							<order>2</order>
							<text>Style XML documents</text>
						</option>
						<option>
							<order>3</order>
							<text>Automatically generate XML data</text>
						</option>
						<option>
							<order>4</order>
							<text>Specify the structure of XML documents</text>
						</option>
					</options>
					<answer></answer>
				</question>
				<question>
					<order>3</order>
					<text>XML namespaces are used to:</text>
					<options>
						<option>
							<order>1</order>
							<text>Prevent name collisions</text>
						</option>
						<option>
							<order>2</order>
							<text>Take credit for XML designs</text>
						</option>
						<option>
							<order>3</order>
							<text>Declare XML schema</text>
						</option>
						<option>
							<order>4</order>
							<text>Name XML documents</text>
						</option>
					</options>
					<answer>1</answer>
				</question>
			</questions>
		</quiz>
	</quizzes>
</course_type>