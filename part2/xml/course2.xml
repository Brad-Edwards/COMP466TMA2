<?xml version="1.0" encoding="UTF-8" ?>
<course_type	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns="http://34.213.198.190/COMP466TMA2/part2/xml"
				xsi:schemaLocation="http://34.213.198.190/COMP466TMA2/part2/xml 
									course_type.xsd">
	<name>JavaScript</name>
	<code>STU200</code>
	<instructors>
		<instructor>
			<instructor_id>3</instructor_id>
			<firstname>Brad</firstname>
			<lastname>Edwards</lastname>
		</instructor>
	</instructors>
	<summary>
		<paragraph>
			<text>This course teaches the basics of JavaScript.</text>
		</paragraph>
	</summary>
	<objectives>
		<objective>Understand the traditional use of JavaScript.</objective>
		<objective>Understand the basics of the JavaScript language and syntax.</objective>
	</objectives>
	<introduction>
		<paragraph>
			<text>JavaScript is a programming language that can be used to turn HTML documents into dynamic pages which can do any number of things, from reacting to user input to executing complex logic.</text>
		</paragraph>
	</introduction>
	<sections>
		<section>
			<order>1</order>
			<title>Introduction</title>
			<content>
				<paragraph>
					<text>JavaScript is a programming language that can be used to turn static HTML documents into dynamic pages which can do any number of things, from reacting to user input to executing complex logic. The most current standardized version of JavaScript is ECMAScript 6, which is supported by most browsers, with the exception of Internet Explorer. JavaScript is not the only programming language  that can be used for web applications, but it is extremely common and is well-supported by web browsers.</text>
				</paragraph>
				<paragraph>
					<text>Many different libraries exist to help developers create web sites. One of the most popular is jQuery. jQuery provides methods to simply working with HTML documents and provides a number of controls which can be integrated into web pages.</text>
				</paragraph>
				<paragraph>
					<text>JavaScript programs, called scripts, can be run on the client-side or server-side. Client-side scripts execute within the user's browser and often manipulate the presentation of the web site. Server-side scripts execute on the server and are used to implement any logic required from the server.</text>
				</paragraph>
				<paragraph>
					<text>Scripts can be included in HTML documents within &#8249;script&#8250; tags. Any text within the tags will be interpreted as JavaScript commands. Scripts can also be written in their own files, usually with .js extensions. All of the text within the file will be interpreted as JavaScript.  These files can be included by HTML documents, again using script tags, as follows:</text><break />
					<text indent="1">&#8249;script type=\text/javascript\ src=\script.js\&#8250;&#8249;/script&#8250;</text>
				</paragraph>
				<paragraph>
					<text>Writing scripts in separate files allows them to be reused in multiple pages or in other projects and may allow IDEs or text editors to better interpret the file content and assist the developer.</text>
				</paragraph>
			</content>
		</section>
		<section>
			<order>2</order>
			<title>Syntax</title>
			<content>
				<paragraph>
					<text>JavaScript shares quite a few similarities with other C-style languages, such as having statements terminated with semi-colons. For most statements, JavaScript is not whitespace sensitive. Whitespace and indentations can be used to improve code-readability without affecting code interpretation.</text>
				</paragraph>
				<paragraph>
					<text>JavaScript uses single- or double-quotes for strings. Within strings, escaping characters works similarly to related languages (e.g. \\\ to escape a double-quote). Other string operators such as\\n for newlines also work. Also, spacing within strings does matter</text>
				</paragraph>
				<paragraph>
					<text>Variables are loosely typed with a default value of 'undefined' if no value is assigned when a variable is declared. Variable reads are non-destructive and garbage collection is used for memory management. Variables are declared using the 'var' or 'let' keywords (e.g. var x = 2;).</text>
				</paragraph>
				<paragraph>
					<text>Basic arithemtic operators and the modulus (%) operator are available, along with a number of bitwise operators. Expressions can be grouped in parenthesis to either change the order of operations or improve code legibility.</text>
				</paragraph>
				<paragraph>
					<text>Arrays are declared as variables using new Array(x), where x is the size of the array to initialize. If x is omitted, the new array will be empty. Arrays can also be declared with values in the following two ways:</text><break />
					<text indent="1">var myArray = new Array('value1', 'value2', 'value3');</text><break />
					<text indent="1">var myArray = [1, 2, 3, 4];</text>
				</paragraph>
				<paragraph>
					<text>Arrays are zero-indexed and array elements can be accessed using square brackets. For instance, myArray[2] would access the third element of the array. Assigning a value to an array index larger than the current size of the array will cause the array to be extended and the value added at the specified index. This can be the source of subtle errors as it is not usually a developer's intent to assign beyond the end of an array. Elements between the former last element of the array and the new last element will be set to undefined.</text>
				</paragraph>
				<paragraph>
					<text>Standard relational operators are provided such as ==, !=, &#8249;, &#8250;, &#8250;=, &#8249;=. Some of the control flow statements available include the following:</text><break />
					<indent /><list>
						<ordered>false</ordered>
						<list_items>
							<list_item>if (x ==y) { foo(); }</list_item>
							<list_item>switch (x) { case 1: foo(); break; case 2: bar(); break; default: doSomethingElse(); }</list_item>
							<list_item>while (x == true) { amazeUsAll(); }</list_item>
							<list_item>for (var i = 0; i &#8249; 5; i++) { dance(); }</list_item>
						</list_items>
					</list>
				</paragraph>
			</content>
		</section>
		<section>
			<order>3</order>
			<title>Functions</title>
			<content>
				<paragraph>
					<text>Functions in JavaScript are treated as first-class objects; they can be assigned to and passed around as variables. They can even be passed in as parameters to other functions. Fuctions are declared using the 'function' keyword as follows:</text><break />
					<text indent="1">function coolFunction() { // statements }</text>
				</paragraph>
				<paragraph>
					<text>A couple of things should be noted with functions. Functions are called by including parenthesis after the function name. However, the parenthesis are left off when passing a function as a parameter. If you call a function that returns a function and want to immediately call the returned function, two sets of parenthesis are used (e.g. functionReturnsFunction()() ).</text>
				</paragraph>
				<paragraph>
					<text>Functions in JavaScript are hoisted, which means they do not need to be declared prior to be being called within a script.</text>
				</paragraph>
			</content>
		</section>
		<section>
			<order>4</order>
			<title>Classes</title>
			<content>
				<paragraph>
					<text>JavaScript supports object-oriented programming, as do many other languages. Unlike functions, classes are not hoisted, so must be declared before being first used in a script. An example of a class declaration is the following:</text><break />
					<text indent="1">Class Car {</text><break />
					<text indent="2">constructor(make, model) {</text><break />
					<text indent="3">this.make = make;</text><break />
					<text indent="3">this.model = model;</text><break />
					<text indent="2">}</text><break />
					<text indent="1">}</text>
				</paragraph>
				<paragraph>
					<text>Classes can static members, getters, setters and more and readers are referred to other sources to learn more about declaring and using classes.</text>
				</paragraph>
			</content>
		</section>
		<section>
			<order>5</order>
			<title>The Document Object Model (DOM)</title>
			<content>
				<paragraph>
					<text>JavaScript works with HTML documents through the DOM. The DOM concept breaks an HTML document into a tree of nested elements. The &#8249;html&#8250; node of a HTML document becomes the root node of the DOM. All other elements are nested below it. The properties of each element, such as width, alignment, and content can all be accessed once a node has been located in JavaScript. Nodes are located by traversing the DOM and selecting desired nodes.</text>
				</paragraph>
				<paragraph>
					<text>In JavaScript the DOM is represented by the global Document object. The Document object has a number of helper methods to make working with the DOM easier. These include getElementByID(id) for selecting elements with specific id values. Elements can be created with the createElement method, inserted with the insertBefore method and removed from a parent node with the removeChild method. There are many more methods available and the reader should consult authoritative sources.</text>
				</paragraph>
			</content>
		</section>
		<section>
			<order>6</order>
			<title>Events</title>
			<content>
				<paragraph>
					<text>JavaScript supports event handling and a number of events are provided by browsers supporting JavaScript. Events allow scripts to respond to occurrences such as document lifecycle events, user input or server responses. When a document is loaded the window object raises a load event that be subscribed to with a call to window.addEventListener('load', StuffToDo). This will cause the StuffToDo method to be called when the document is loaded. Some HTML5 elements such as buttons raise their own events that can be subscribed to in a similar way, though it may take some calls to get the elemennt. For instance, document.getElementByID('myButton').addEventListener('click', ClickHandler) would result in the ClickHandler function being called whenever the user clicks on a button with id myButton. Event listeners can be removed with .removeEventListener() calls.</text>
				</paragraph>
			</content>
		</section>
	</sections>
	<assignments>
	</assignments>
	<quizzes>
		<quiz>
			<order>1</order>
			<title>Client-Side JavaScript Quiz</title>
			<weight>100</weight>
			<questions>
				<question>
					<order>1</order>
					<text>JavaScript scripts are declared in which HTML element?</text>
					<options>
						<option>
							<order>1</order>
							<text>link</text>
						</option>
						<option>
							<order>2</order>
							<text>script</text>
						</option>
						<option>
							<order>3</order>
							<text>src</text>
						</option>
						<option>
							<order>4</order>
							<text>meta</text>
						</option>
					</options>
					<answer>2</answer>
				</question>
				<question>
					<order>2</order>
					<text>JavaScript scripts are typically run in:</text>
					<options>
						<option>
							<order>1</order>
							<text>The cloud</text>
						</option>
						<option>
							<order>2</order>
							<text>Database servers</text>
						</option>
						<option>
							<order>3</order>
							<text>Browsers</text>
						</option>
						<option>
							<order>4</order>
							<text>Web servers</text>
						</option>
					</options>
					<answer>3</answer>
				</question>
				<question>
					<order>3</order>
					<text>The DOM is the:</text>
					<options>
						<option>
							<order>1</order>
							<text>Document Object Model</text>
						</option>
						<option>
							<order>2</order>
							<text>Data-Oriented Model</text>
						</option>
						<option>
							<order>3</order>
							<text>Defined Object Model</text>
						</option>
						<option>
							<order>4</order>
							<text>Document Object Manifest</text>
						</option>
					</options>
					<answer>1</answer>
				</question>
				<question>
					<order>4</order>
					<text>Developers can use JavaScript to do the following to a DOM:</text>
					<options>
						<option>
							<order>1</order>
							<text>Select nodes by ID</text>
						</option>
						<option>
							<order>2</order>
							<text>Create nodes</text>
						</option>
						<option>
							<order>3</order>
							<text>Alter the content of nodes</text>
						</option>
						<option>
							<order>4</order>
							<text>All of the above</text>
						</option>
					</options>
					<answer>4</answer>
				</question>
				<question>
					<order>5</order>
					<text>Which of hte following is a valid JavaScript function declaration?</text>
					<options>
						<option>
							<order>1</order>
							<text>func doThings()</text>
						</option>
						<option>
							<order>2</order>
							<text>function int doThings()</text>
						</option>
						<option>
							<order>3</order>
							<text>public function doThings(someVariable)</text>
						</option>
						<option>
							<order>4</order>
							<text>function doThings(someVariable)</text>
						</option>
					</options>
					<answer>4</answer>
				</question>
			</questions>
		</quiz>
	</quizzes>
</course_type>